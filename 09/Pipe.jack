class Pipe {
    // statics
    static int velocity;
    static int margin;
    // fields
    field int xPosition;
    field int yPosition;
    field boolean playerPassed;

    constructor Pipe new(int x, int y) {
        let xPosition = x;
        let yPosition = y;
        let playerPassed = false;
        return this;
    }

    function void initStatics(int vel, int marg) {
        let velocity = vel;
        let margin = marg;
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void drawFrame() {
        // *** DRAW CURRENT FRAME ***
        do Screen.setColor(true);
        // lower pipe
        do Screen.drawRectangle(Math.min(Math.max(xPosition - 2,0), 511), yPosition + 30, Math.min(Math.max(xPosition+44, 0), 511), yPosition + 55);  
        do Screen.drawRectangle(Math.min(Math.max(xPosition, 0), 511), yPosition + 54, Math.min(Math.max(xPosition + 43, 0), 511), 255);         
        // upper pipe
        do Screen.drawRectangle(Math.min(Math.max(xPosition - 2, 0), 511), yPosition - (margin + 24), Math.min(Math.max(xPosition + 45, 0), 511), yPosition - margin); 
        do Screen.drawRectangle(Math.min(Math.max(xPosition, 0), 511), 0, Math.min(Math.max(xPosition + 43, 0), 511), yPosition - (margin+25)); 
        // *** ERASE LAST FRAME ***
        do Screen.setColor(false);
        // lower pipe
        do Screen.drawRectangle(Math.min(Math.max(xPosition + 46, 0), 511), yPosition + 30, Math.min(Math.max(xPosition + (48 + velocity), 0), 511), yPosition + 55);
        do Screen.drawRectangle(Math.min(Math.max(xPosition + 44, 0), 511), yPosition + 56, Math.min(Math.max(xPosition + (46 + velocity), 0), 511), 255);
        // upper pipe
        do Screen.drawRectangle(Math.min(Math.max(xPosition + 46, 0), 511), yPosition - (margin + 25), Math.min(Math.max(xPosition + 47, 0), 511), yPosition - margin + 1);
        do Screen.drawRectangle(Math.min(Math.max(xPosition + 44, 0), 511), 0, Math.min(Math.max(xPosition + 45, 0), 511), yPosition - (margin + 25));
        return;
    }

    method void tick() {
        let xPosition = xPosition - velocity;
        // check if out of screen (left)
        if (xPosition < (-50)) {
            let playerPassed = false;
            let xPosition = 514;
            let yPosition = 80 + Random.randomInRange(114);
        }
        // check if out of screen (right)
        if (xPosition > 614) {
            let yPosition = 80 + Random.randomInRange(114);
        }
        do drawFrame();
        return;
    }

    // getters
    method int getX() {
        return xPosition;
    }

    method int getY() {
        return yPosition;
    }

    method boolean getPlayerPassed() {
        return playerPassed;
    }

    // returns true iff player is in this pipe's boundary
    method int isCollidingWithPlayer(int playerX, int playerY) {
        if ((playerX > (xPosition - 32)) & (playerX < (xPosition + 40))) {
            if ((playerY > yPosition) | (playerY < (yPosition - (margin + 6)))) { 
                return 2; // collision
            }
            if (~playerPassed) {
                let playerPassed = true;
                return 1; 
            }       
        }
        return 0;
    }
}