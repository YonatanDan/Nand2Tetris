// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // compute ARegister in
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=inAReg);

    // compute ARegister load
    Not(in=instruction[15], out=Ainstruction);
    And(a=instruction[15], b=instruction[5], out=toAReg);
    Or(a=toAReg, b=Ainstruction, out=loadAReg);

    ARegister(in=inAReg, load=loadAReg, out=ARegOut);

    //compute DRegister load
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=ALUOut, load=loadDReg, out=DRegOut);

    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AMux16M);

    ALU(x=DRegOut, y=AMux16M, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7]
    , no=instruction[6], out=ALUOut, zr=zr, ng=ng);

    // Handle WriteM, AddressM and OutM
    Or16(a=ARegOut, b=false, out[0..14]=addressM);
    Or16(a=ALUOut, b=false, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Calculate PC's Load and Inc
    Or(a=jle, b=jgt, out=PCload);
    Not(in=PCload, out=PCInc); 

    PC(in=ARegOut, load=PCload, inc=PCInc, reset=reset, out[0..14]=pc);

    /******** JUMP LOGIC ********/
        // JGT
        Not(in=ng, out=Notng);
        Not(in=zr, out=Notzr);
        And(a=Notng, b=Notzr, out=positive);
        And(a=instruction[15], b=instruction[0], out=ins15Andins0);
        And(a=positive, b=ins15Andins0, out=jgt);

        // JEQ
        And(a=instruction[15], b=instruction[1], out=ins15Andins1);
        And(a=zr, b=ins15Andins1, out=jeq);

        // JGE
        Or(a=jeq, b=jgt, out=jge);

        // JLT
        And(a=instruction[15], b=instruction[2], out=ins15andins2);
        And(a=ins15andins2, b=ng, out=jlt);

        // JNE
        Or(a=jlt, b=jgt, out=jne);

        // JLE
        Or(a=jeq, b=jlt, out=jle);
}